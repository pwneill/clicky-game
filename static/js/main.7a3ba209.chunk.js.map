{"version":3,"sources":["components/header.js","components/jumbotron.js","components/card.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","id","message","score","bestScore","Jumbotron","CandidateCard","onClick","handleClick","src","image","alt","name","App","state","candidates","clicked","shuffleArray","array","i","length","j","Math","floor","random","temp","_this","setState","clickCard","includes","clickedArr","concat","Object","toConsumableArray","checkScore","this","newScore","_this2","header","jumbotron","map","candidate","card","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a3ba209.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./headerStyle.css\";\n\nfunction Header (props) {\n    return (\n        <div className=\"row row-fluid pt-3 pr-2 border-bottom ml-0 mr-0\" id=\"header\">\n            <div className=\"col-md-4 pt-1 pb-2 text-center\" id=\"title\">\n                <h3 className=\"text-center\">Clicky Game</h3>\n            </div>\n            <div className=\"col-md-4 pt-1 pb-2 text-center\" id=\"title\">\n                <h3 className=\"text-center\">{props.message}</h3>\n            </div>\n            <div className=\"col-md-4 pt-1 pb-2 text-center\" id=\"title\">\n                <h3 className=\"text-center\">Score: {props.score} | High Score:  {props.bestScore}</h3>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport \"./jumbotronStyle.css\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4 text-center\">Clicky Game!</h1>\n        <p className=\"lead text-center\">\n          Click any politicain to earn points. But be careful not to click the same one twice!\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./cardStyle.css\";\n\nfunction CandidateCard (props) {\n    return (\n      <div className=\"col-md-3 mt-4 ml-5 mr-5\">\n          <img onClick={() => props.handleClick(props.id)} className=\"img-responsive img-thumbnail\"\n            id={props.id}\n            src={props.image}\n            alt={props.name}\n          />\n      </div>\n    );\n  }\n\n\nexport default CandidateCard;\n","import React from \"react\";\nimport candidates from \"./candidates.json\";\nimport Header from \"./components/header\";\nimport Jumbotron from \"./components/jumbotron\";\nimport CandidateCard from \"./components/card\";\n\nclass App extends React.Component {\n  state = {\n    candidates,\n    score: 0,\n    bestScore: 0,\n    clicked: [],\n    message: \"Welcome!\"\n  };\n\n  componentWillMount() {\n    this.shuffleArray(candidates)\n  }\n\n  shuffleArray = array => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    this.setState({ candidates: array })\n  }\n\n  checkScore() {\n    var newScore = this.state.score;\n    if (newScore >= this.state.bestScore) {\n      this.setState({ score: (newScore + 1) });\n      this.setState({ bestScore: (newScore + 1) });\n    } else {\n      this.setState({ score: (newScore + 1) });\n    }\n  }\n\n  clickCard = id => {\n    if (this.state.clicked.includes(id)) {\n      this.setState({ score: 0 });\n      this.setState({ clicked: [] });\n      this.setState({message: \"You Guessed Incorrectly!\"})\n    } else {\n      let clickedArr = [...this.state.clicked, id];\n      this.shuffleArray(this.state.candidates); \n      this.setState({ clicked: clickedArr });\n      this.setState({message: \"You Guessed Correctly!\"})\n      this.checkScore();\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Header \n        score={this.state.score}\n        bestScore={this.state.bestScore}\n        message={this.state.message}\n        />\n        <Jumbotron />\n        <div className=\"row pl-2 pr-2\">\n          {this.state.candidates.map(candidate => (\n            <CandidateCard\n              key={candidate.id}\n              id={candidate.id}\n              name={candidate.name}\n              image={candidate.image}\n              handleClick={this.clickCard}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// To do: \n// -- Fix shitty image quality\n// -- add shake animation\n// -- deploy! ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}